#!/usr/bin/env node

const args = require('args');
const chalk = require('chalk');
const fs = require('fs');
const path = require('path');
const glob = require('glob');

const lint = require('../index');
const { outputFormatter } = lint;

const unique = list =>
  list.filter((item, index, list) => list.indexOf(item) === index);

args
  .option('debug', 'Show debug log', 'false', isDebug => isDebug === 'true')
  .option(
    'rule',
    'Use local `**.js` file as new rule.',
    undefined,
    listStr =>
      typeof listStr === 'string' && listStr.length > 0 && listStr.split(',')
  )
  .example('cnlint ./**/*.md', 'Lint all markdown files pwd.')
  .example('cnlint ./demo1.md ./demo2.md', 'Lint multiple markdown files.')
  .example(
    'cnlint --debug=true ./example.md',
    'Show debug logs when lint files.'
  );

const flags = args.parse(process.argv);

const debug = (...logs) =>
  flags.debug ? console.debug('Debug:', ...logs) : null;

debug(`flags ${JSON.stringify(flags)}`);

const list = [];
const files = args.sub;
if (!files.length) {
  console.log(chalk.red('Error: At least one markdown file is needed.'));
}

files.forEach(filepath => list.push(...glob.sync(filepath)));
const lintFiles = unique(list);

debug(`lint files '${lintFiles.join(', ')}'`);

const localRules = (flags.rule || []).map(rulePath => {
  const fullPath = path.join(process.env.PWD, rulePath);
  if (fs.existsSync(fullPath)) {
    return require(fullPath);
  }
});

try {
  outputFormatter(lint({ files: lintFiles, rules: localRules }));
} catch (error) {
  console.log(chalk.red(error.message));
  debug(error);
}
